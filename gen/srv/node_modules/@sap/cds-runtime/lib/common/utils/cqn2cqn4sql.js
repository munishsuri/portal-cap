const { getOnCond } = require('../../common/utils/generateOnCond')
const { resolveView } = require('../utils/resolveView')
const cds = global.cds || require('@sap/cds/lib')
const { SELECT, INSERT, DELETE, UPDATE } = cds.ql
const { ensureNoDraftsSuffix } = require('../../common/utils/draft')
const { flattenStructured } = require('./structured')
const { foreignKeyPropagations } = require('../../common/utils/foreignKeyPropagations')

const isStructured = element => element && element.elements
const isNavigation = element => element && (element.type === 'cds.Association' || element.type === 'cds.Composition')

const _addOnCondToWhere = (cqn, entity, tableAlias, identifier, csn, prefix) => {
  const onConditionOptions = {
    associationNames: [...prefix, entity.current],
    csn: csn,
    aliases: {
      select: tableAlias,
      join: identifier
    }
  }

  const onCond = getOnCond(csn.definitions[entity.previous].elements[entity.current], onConditionOptions)

  cqn.where(onCond)
}

const _addAliasToElement = (e, alias) => {
  if (e.ref) {
    return { ref: [alias, ...e.ref] }
  }

  if (e.list) {
    return { list: e.list.map(arg => _addAliasToElement(arg, alias)) }
  }

  if (e.func) {
    const args = e.args.map(arg => _addAliasToElement(arg, alias))
    return { ...e, args }
  }

  return e
}

const _addAliasToExpression = (expression, alias) => {
  if (!alias) {
    return expression
  }

  return expression.map(e => _addAliasToElement(e, alias))
}

const _elementFromRef = (name, entity) => {
  if (!entity) return

  if (entity.elements) {
    return entity.elements[_getTargetFromRef(name)]
  }
}

const _getTargetFromRef = ref => {
  return ref.id || ref
}

const _getEntityName = (fromClause, entity, i) => {
  const targetName = _getTargetFromRef(fromClause.ref[i])
  return i === 0 ? targetName : entity.elements[targetName].target
}

const convertPathExpressionToWhere = (fromClause, model) => {
  if (fromClause.ref.length === 1) {
    const target = _getTargetFromRef(fromClause.ref[0])
    const alias = fromClause.as
    const where = fromClause.ref[0].where

    return { target, alias, where }
  }

  let previousSelect, previousEntityName, previousTableAlias, structParent
  let prefix = []
  for (let i = 0; i < fromClause.ref.length; i++) {
    const entity = model.definitions[structParent || previousEntityName]
    const element = _elementFromRef(fromClause.ref[i], entity)
    if (isStructured(element)) {
      prefix.push(element.name)
      structParent = element.type
      continue
    } else if (isNavigation(element) && fromClause.ref[i].where) {
      const target = element._target
      _modifyNavigationInWhere(fromClause.ref[i].where, target)
    }

    const currentEntityName = _getEntityName(fromClause, entity, i)

    const tableAlias = `T${i}`

    const currentSelect = SELECT.from(`${currentEntityName} as ${tableAlias}`)

    if (fromClause.ref[i].where) {
      currentSelect.where(_addAliasToExpression(fromClause.ref[i].where, tableAlias))
    }

    if (i !== fromClause.ref.length - 1) {
      currentSelect.columns([1])
    }

    if (previousSelect) {
      _addOnCondToWhere(
        previousSelect,
        { current: _getTargetFromRef(fromClause.ref[i]), previous: structParent || previousEntityName },
        tableAlias,
        previousTableAlias,
        model,
        prefix
      )
      currentSelect.where('exists', previousSelect)
    }

    structParent = undefined
    prefix = []
    previousTableAlias = tableAlias
    previousSelect = currentSelect
    previousEntityName = currentEntityName
  }

  return {
    target: previousEntityName,
    alias: previousTableAlias,
    where: previousSelect && previousSelect.SELECT && previousSelect.SELECT.where
  }
}

const _convertPathExpressionForInsertOrDelete = (intoClause, model) => {
  // .into is plain string or csn entity
  if (typeof intoClause === 'string' || intoClause.name) {
    return intoClause
  }

  return intoClause.ref.reduce((res, curr, i) => {
    if (i === 0) {
      return curr.id || curr
    }
    return model.definitions[res].elements[curr.id || curr].target
  }, '')
}

const _getValueForStruct = (structKeys, data) => {
  if (!data) return

  if (structKeys.length > 1) {
    return _getValueForStruct(structKeys.slice(1), data[structKeys[0]])
  }

  return data[structKeys[0]]
}

const _getBottomTopRefOrVal = (func, refVal) => {
  return func.args.filter(el => el[refVal])
}

const _getWindowWhere = (where, bottomTop) => {
  const windWhere = where || []
  const bottomTopVal = _getBottomTopRefOrVal(bottomTop[0], 'val')[0]
  bottomTopVal.val = parseInt(bottomTopVal.val, 10)

  if (windWhere.length > 0) {
    windWhere.push('and')
  }

  windWhere.push({ ref: ['rowNumber'] }, '<=', bottomTopVal)

  return windWhere
}

const _getOrderByForWindowFn = bottomTop => {
  const orderBy = _getBottomTopRefOrVal(bottomTop[0], 'ref')[0]
  orderBy.sort = bottomTop[0].func === 'topcount' ? 'desc' : 'asc'
  return orderBy
}

const _getWindowXpr = (groupBy, bottomTop) => {
  const xpr = [{ func: 'ROW_NUMBER', args: [] }, 'OVER', '(']
  xpr.push(
    'PARTITION BY',
    ...groupBy.reduce((acc, el, i) => {
      if (i < groupBy.length - 1) {
        acc.push(el)
        acc.push(',')
      } else {
        acc.push(el)
      }
      return acc
    }, [])
  )
  xpr.push('ORDER BY', _getOrderByForWindowFn(bottomTop))
  xpr.push(')')

  return { xpr: xpr, as: 'rowNumber' }
}

const _getAllColumnsFromEntity = (cqn, model) => {
  const entity = model.definitions[cqn.from.ref[0]]
  const columns = []
  Object.keys(entity.elements).forEach(el => {
    if (entity.elements[el].type !== 'cds.Association' && entity.elements[el].type !== 'cds.Composition') {
      columns.push({ ref: [`${el}`] })
    }
    return columns
  })
  return columns
}

const _isBottomTop = columns => {
  return columns.some(el => el.func && (el.func === 'topcount' || el.func === 'bottomcount'))
}

const _getWindColumns = (columns, groupBy, bottomTop) => {
  return [].concat(columns, _getWindowXpr(groupBy, bottomTop))
}

const _createWindowCQN = (SELECT, model) => {
  const from = Object.assign({}, SELECT.from)
  const bottomTop = SELECT.columns.filter(el => _isBottomTop([el]))
  const columns = _getAllColumnsFromEntity(SELECT, model)

  SELECT.where = _getWindowWhere(SELECT.where, bottomTop)

  SELECT.columns = columns
  SELECT.from = {
    SELECT: {
      columns: _getWindColumns(columns, SELECT.groupBy, bottomTop),
      from: from
    }
  }
  delete SELECT.groupBy
}

const _convertSelect = (cqn, model) => {
  // no path expression
  if (!cqn.SELECT.from.ref || (cqn.SELECT.from.ref.length === 1 && !cqn.SELECT.from.ref[0].where)) {
    // REVISIT: cds.env.effective will be there with @sap/cds^4.2
    const effective = cds.env.effective || cds.env
    if (cqn.SELECT.columns && effective.odata.structs) {
      flattenStructured(cqn.SELECT, model)
    }
    // topcount with groupby
    if (cqn.SELECT.columns && _isBottomTop(cqn.SELECT.columns)) {
      _createWindowCQN(cqn.SELECT, model)
    }
    return cqn
  }
  const { target, alias, where } = convertPathExpressionToWhere(cqn.SELECT.from, model)

  const select = SELECT.from(target)

  if (alias) {
    select.SELECT.from.as = alias
  }

  // TODO: REVISIT: We need to add alias to subselect in .where, .columns, .from, ... etc
  if (where) {
    select.where(where)
  }
  if (cqn.SELECT.where) {
    select.where(_addAliasToExpression(cqn.SELECT.where, select.SELECT.from.as))
  }

  // We add all previous properties ot the newly created query.
  // Reason is to not lose the query API functionality
  Object.assign(select.SELECT, cqn.SELECT, { from: select.SELECT.from, where: select.SELECT.where })

  if (select.SELECT.columns && cds.env.effective.odata.structs) {
    flattenStructured(select.SELECT, model)
  }

  return select
}

const _getElement = (column, columns, target) => {
  if (!target) return

  if (columns) {
    // if columns is defined, column is index and row[column] should contain value that belongs to name in columns with same index
    return target.elements[columns[column]]
  }

  return target.elements[column]
}

const _handleArrayedElements = (rows, target, columns) => {
  for (const row of rows) {
    for (const column in row) {
      const element = _getElement(column, columns, target)

      if (element && element.is2one) {
        _handleArrayedElements([row[column]], element._target, columns)
      } else if (element && element.is2many) {
        _handleArrayedElements(row[column], element._target, columns)
      } else if (isStructured(element)) {
        _handleArrayedElements([row[column]], element, columns)
      } else if (Array.isArray(row[column])) {
        row[column] = JSON.stringify(row[column])
      }
    }
  }
}

const _convertInsert = (cqn, model) => {
  // resolve path expression
  const resolvedIntoClause = _convertPathExpressionForInsertOrDelete(cqn.INSERT.into, model)

  // overwrite only .into, foreign keys are already set
  const insert = INSERT.into(resolvedIntoClause)

  // REVISIT flatten structured types, currently its done in SQL builder

  // We add all previous properties ot the newly created query.
  // Reason is to not lose the query API functionality
  Object.assign(insert.INSERT, cqn.INSERT, { into: resolvedIntoClause })

  const targetName = insert.INSERT.into.name || insert.INSERT.into
  const queryTarget = model.definitions[ensureNoDraftsSuffix(targetName)]

  // REVISIT: cds.env.effective will be there with @sap/cds^4.2
  const effective = cds.env.effective || cds.env
  if (effective.odata.version !== 'v2') {
    if (cqn.INSERT.entries) {
      _handleArrayedElements(cqn.INSERT.entries, queryTarget)
    } else if (cqn.INSERT.rows) {
      _handleArrayedElements(cqn.INSERT.rows, queryTarget, cqn.INSERT.columns)
    } else if (cqn.INSERT.values) {
      _handleArrayedElements([cqn.INSERT.values], queryTarget, cqn.INSERT.columns)
    }
  }

  const target = model.definitions[targetName]
  if (!target) return insert
  return resolveView(insert, model, 'DatabaseService')
}

function _modifyNavigationInWhere (whereClause, target) {
  whereClause.forEach(e => {
    if (e.ref && e.ref.length > 1 && target.elements[e.ref[0]]) {
      const element = target.elements[e.ref[0]]
      if (!isNavigation(element)) return
      const foreignKeys = foreignKeyPropagations(element)
      const joined = e.ref.join('_')
      for (const { parentFieldName } of foreignKeys) {
        if (parentFieldName === joined) {
          e.ref = [joined]
        }
      }
    }
  })
}

const _convertDelete = (cqn, model) => {
  const fromClause = _convertPathExpressionForInsertOrDelete(cqn.DELETE.from, model)

  if (!model.definitions[fromClause]) {
    return cqn
  }
  const target = model.definitions[fromClause]
  if (!target) return cqn
  const newDelete = resolveView(cqn, model, 'DatabaseService')

  Object.setPrototypeOf(newDelete, DELETE('x'))

  // subsequent code doesn't like `ref`s.
  const lastTransition = newDelete.DELETE._transitions[newDelete.DELETE._transitions.length - 1]
  newDelete.DELETE.from = lastTransition.target.name

  // TODO: delete on to one not yet supported
  const whereClause = cqn.DELETE.from.ref ? cqn.DELETE.from.ref[cqn.DELETE.from.ref.length - 1].where : undefined

  if (cqn.DELETE.from.as) {
    // continue current support for deep delete
    const newTarget = newDelete.DELETE.from
    newDelete.DELETE.from = { ref: [newTarget], as: cqn.DELETE.from.as }
  }

  if (whereClause) {
    _modifyNavigationInWhere(whereClause, target)

    newDelete.where(whereClause)
  }

  if (cqn.DELETE.where) {
    newDelete.where(cqn.DELETE.where)
  }

  return newDelete
}

function _plainUpdate (model, cqn) {
  const name = cqn.UPDATE.entity.name || (cqn.UPDATE.entity.ref && cqn.UPDATE.entity.ref[0]) || cqn.UPDATE.entity
  const queryTarget = model.definitions[ensureNoDraftsSuffix(name)]

  // REVISIT: cds.env.effective will be there with @sap/cds^4.2
  const effective = cds.env.effective || cds.env
  if (effective.odata.version !== 'v2') {
    cqn.UPDATE.data && _handleArrayedElements([cqn.UPDATE.data], queryTarget)
    cqn.UPDATE.with && _handleArrayedElements([cqn.UPDATE.with], queryTarget)
  }

  const target = model.definitions[name]
  if (!target) return cqn
  return resolveView(cqn, model, 'DatabaseService')
}

const _convertUpdate = (cqn, model) => {
  // REVISIT flatten structured types, currently its done in SQL builder

  // .into is plain string or csn entity
  if (
    typeof cqn.UPDATE.entity === 'string' ||
    cqn.UPDATE.entity.name ||
    (cqn.UPDATE.entity.ref && typeof cqn.UPDATE.entity.ref[0] === 'string')
  ) {
    return _plainUpdate(model, cqn)
  }

  const { target, alias, where } = convertPathExpressionToWhere(cqn.UPDATE.entity, model)

  // link .with and .data and set query target and remove current where clause
  // REVISIT: update statement does not accept cqn partial as input
  const update = UPDATE('x')
  Object.assign(update.UPDATE, cqn.UPDATE, { entity: target, where: undefined })

  if (alias) {
    update.UPDATE.entity = { ref: [target], as: alias }
  }

  if (where) {
    update.where(where)
  }
  if (cqn.UPDATE.where) {
    update.where(_addAliasToExpression(cqn.UPDATE.where, alias))
  }

  const queryTarget = model.definitions[target]

  // REVISIT: cds.env.effective will be there with @sap/cds^4.2
  const effective = cds.env.effective || cds.env
  if (effective.odata.version !== 'v2') {
    cqn.UPDATE.data && _handleArrayedElements([cqn.UPDATE.data], queryTarget)
    cqn.UPDATE.with && _handleArrayedElements([cqn.UPDATE.with], queryTarget)
  }

  const targetEntity = model.definitions[target]
  if (!targetEntity) return update
  return resolveView(update, model, 'DatabaseService')
}

/**
 * Converts a CQN with path expression into exists clause.
 * Converts insert/update/delete on view to target table including renaming of properties
 * REVISIT structured
 * REVISIT topcount when the additional layer for Analytics before SQLBuilder is ready
 *
 * @param {*} cqn - incoming query
 * @param {*} model - csn model
 */
module.exports = (cqn, model) => {
  if (cqn.DELETE) {
    return _convertDelete(cqn, model)
  }

  if (cqn.SELECT) {
    return _convertSelect(cqn, model)
  }

  if (cqn.INSERT) {
    return _convertInsert(cqn, model)
  }

  if (cqn.UPDATE) {
    return _convertUpdate(cqn, model)
  }

  return cqn
}
