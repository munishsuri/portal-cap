const MAX_NUMBER_RECONNECTS = 1000
const MAX_WAITING_TIME = 1480000
const cds = global.cds || require('@sap/cds/lib')

const LOG = cds.log('messaging')

const _waitingTime = x => (x > 18 ? MAX_WAITING_TIME : (Math.pow(1.5, x) + Math.random()) * 1000)

const _periodicallyReconnect = (client, x, n) => {
  setTimeout(() => {
    connect(client).catch(e => {
      // REVISIT: no console
      console.error(e)
      LOG._debug && LOG.debug(`Connection to Enterprise Messaging Client lost: Unsuccessful attempt to reconnect (${n}).`)
      /* istanbul ignore else */
      if (n < MAX_NUMBER_RECONNECTS) _periodicallyReconnect(client, x + 1, n + 1)
    })
  }, _waitingTime(x))
}

const connect = client => {
  return new Promise((resolve, reject) => {
    client
      .once('connected', function () {
        client.removeAllListeners('error')

        client.on('error', err => {
          LOG._error && LOG.error('AMQP Error:', err)
          client.disconnect()
        })

        resolve(this)
      })
      .once('error', err => {
        client.removeAllListeners('disconnected')
        client.removeAllListeners('connected')
        reject(err)
      })
      .once('disconnected', () => {
        client.removeAllListeners('error')
        client.removeAllListeners('connected')
        _periodicallyReconnect(client, 0, 0)
      })

    client.connect()
  })
}

const disconnect = client => {
  return new Promise((resolve, reject) => {
    client.removeAllListeners('disconnected')
    client.removeAllListeners('connected')
    client.removeAllListeners('error')

    client.once('disconnected', () => {
      client.removeAllListeners('error')
      resolve()
    })
    client.once('error', err => {
      client.removeAllListeners('disconnected')
      reject(err)
    })

    client.disconnect()
  })
}

module.exports = {
  connect,
  disconnect
}
