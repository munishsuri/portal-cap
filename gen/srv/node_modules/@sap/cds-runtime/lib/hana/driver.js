const cds = global.cds || require('@sap/cds/lib')
const LOG = cds.log('HanaDatabase')

/*
 * dynatrace
 */

const { dynatraceClient, isDynatraceEnabled } = require('./dynatrace')

/*
 * common
 */

const _ensureError = err => (err instanceof Error ? err : Object.assign(new Error(err.message), err))

function _disconnect (client) {
  return new Promise(resolve => {
    client.disconnect(err => {
      // REVISIT: what to do? ignore? crash app?
      if (err) resolve()
      else resolve()
    })
  })
}

/*
 * hdb
 */

const _addCheckServerIdentity = creds => {
  // REVISIT: copied from old cds-hana
  if (creds.sslValidateCertificate === false && creds.sslHostNameInCertificate) {
    const allowedHost = creds.sslHostNameInCertificate
    creds.checkServerIdentity = host => {
      if (host !== allowedHost) {
        throw new Error(
          `The name on the security certificate "${allowedHost}" is invalid or does not match the name of the site "${host}".`
        )
      }
    }
  }
}

const _registerReconnect = (client, creds) => {
  client.on('close', hadErr => {
    if (hadErr) {
      // try to re-connect
      client.connect(e => {
        // REVISIT old behaviour in reconnect was to catch all errors
        // if (err) throw err

        if (creds.schema) {
          client.exec(`SET SCHEMA ${creds.schema}`, e => {
            // REVISIT old behaviour in reconnect was to catch all errors
            // if (e) throw e
          })
        }
      })
    }
  })
}

function _connectHdb (creds, tenant) {
  _addCheckServerIdentity(creds)

  return new Promise((resolve, reject) => {
    const hdbClient = this.createClient(creds)
    hdbClient.name = this.name // TODO find better way?

    const client = isDynatraceEnabled() ? dynatraceClient(hdbClient, creds, tenant) : hdbClient

    client.connect(err => {
      if (err) {
        LOG._error && LOG.error(`error on hdb connect for tenant "${tenant}"`, err)
        reject(_ensureError(err))
      } else {
        _registerReconnect(client, creds)
        if (creds.schema) {
          client.exec(`SET SCHEMA ${creds.schema}`, err => {
            if (err) reject(Object.assign(new Error('Could not set schema'), err))
            else resolve(client)
          })
        } else resolve(client)
      }
    })
  })
}

/*
 * hana-client
 */

function _connectHanaClient (creds, tenant) {
  return new Promise((resolve, reject) => {
    const hanaClient = this.createConnection()

    hanaClient.name = this.name // TODO find better way?
    // ugly, but we need it for the hana-client streaming extension.
    // "client" does not contain the credentials in case of hana-client.
    hanaClient._creds = creds

    const client = isDynatraceEnabled() ? dynatraceClient(hanaClient, creds, tenant) : hanaClient

    if (creds.schema) {
      // REVISIT
      creds.CURRENTSCHEMA = creds.schema
    }
    client.connect(creds, err => {
      if (err) {
        LOG._error && LOG.error(`error on hana-client connect for tenant "${tenant}"`, err)
        reject(_ensureError(err))
      } else resolve(client)
    })
  })
}

/*
 * facade
 */

let driver

const _getHanaDriver = (name = 'hdb') => {
  if (driver) return driver

  try {
    driver = Object.assign({ name }, require(name))

    driver.__connect = (...args) =>
      name === 'hdb' ? _connectHdb.call(driver, ...args) : _connectHanaClient.call(driver, ...args)
    driver.__disconnect = _disconnect
    driver.__isConnected = client =>
      name === 'hdb' ? client.readyState === 'connected' : client.state() === 'connected'

    return driver
  } catch (e) {
    if (name === 'hdb') {
      LOG._debug && LOG.debug(`Failed to require "hdb" with error "${e.message}". Trying "@sap/hana-client" next.`)
      return _getHanaDriver('@sap/hana-client')
    } else {
      throw new Error(
        'Neither "hdb" nor "@sap/hana-client" could be required. Please make sure one of them is installed.'
      )
    }
  }
}

module.exports = _getHanaDriver('hdb')
