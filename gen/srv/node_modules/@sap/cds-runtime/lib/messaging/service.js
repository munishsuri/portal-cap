const cds = global.cds || require('@sap/cds/lib')
const utils = require('./service-utils')
const uuid = require('../common/utils/uuid')

const outbound = (self, topic) => async (msg, next) => {
  // REVISIT: If header "x-cds-incoming-protocol" is not present, custom headers were provided.
  const headers = msg.headers['x-cds-incoming-protocol'] ? {} : msg.headers
  await self.tx(msg).emit({ event: topic, data: msg.data, headers })
  return next()
}

const inbound = (each, event) => async (msg, next) => {
  await each.tx(msg).emit({ event, data: msg.data, headers: msg.headers })
  return next()
}

const isInbound = srv => srv.name in cds.requires && !srv.mocked
const isOutbound = srv => !(srv.name in cds.requires) && !srv.mocked

class MessagingService extends cds.Service {
  init () {
    cds.on('subscribe', (srv, event) => {
      if (!isInbound(srv)) return
      const eventCsn = srv.events[event]
      if (eventCsn) {
        const topic = utils.topic(event, eventCsn, srv, this)
        this.on(topic, inbound(srv, event))
      }
    })
    cds.on('serving', srv => {
      if (!isOutbound(srv)) return
      for (const eventCsn of srv.events) {
        const event = eventCsn.name.slice(srv.name.length + 1)
        const topic = utils.topic(event, eventCsn, srv, this)
        srv.on(event, outbound(this, topic))
      }
    })
    // if outbox is switched on, decorate the emit method to actually do
    // the emit only when the request succeeded
    if (this.options.outbox) {
      const { emit } = this
      this.emit = function (...args) {
        // `this` is a srv.tx
        if (this.context) return this.context.on('succeeded', () => emit.call(this, ...args))
        return emit.call(this, ...args)
      }
    }

    const { on } = this
    this.on = function (...args) {
      if (Array.isArray(args[0])) {
        const [topics, ...rest] = args
        return topics.map(t => on.call(this, t, ...rest))
      }
      return on.call(this, ...args)
    }
  }
  /** Subclasses can use this method to create events */
  message4 (event, data, headers) {
    const msg = typeof event === 'object' ? event : { event, data, headers }
    if (!msg.headers || !msg.headers.id) msg.headers = { id: uuid(), ...msg.headers }
    return msg
  }
}

module.exports = MessagingService
