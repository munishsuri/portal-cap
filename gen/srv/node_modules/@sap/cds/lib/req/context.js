const async_events = { succeeded:1, failed:1, done:1 }
const { EventEmitter } = require('events')
const { inspect } = require('util')
const User = require ('./user')

/**
 * This is the base class for `cds.Events` and `cds.Requests`,
 * providing the transaction context nature to all instances.
 * Calling `srv.tx()` without args to start new transacions
 * creates direct instances of this base class.
 */
class EventContext {

  constructor(_) { Object.assign (this,this._=_||{}) }
  toString() { return `${this.event} ${this.path}` }
  [inspect.custom]() { return `${this.constructor.name} ${inspect(this._)}` }


  //
  // Emitting and listening to succeeded / failed / done events
  //

  /** @returns {EventEmitter} */ get emitter() {
    return this._emitter || (this._emitter = this.context ? this.context.emitter : new EventEmitter)
  }

  async emit (event,...args) {
    if (!this._emitter) return
    if (event in async_events) {
      for (const each of this._emitter.listeners(event)) {
        await each.call(this,...args)
      }
    }
    else return this._emitter.emit (event,...args)
  }

  on (event, listener) {
    return this.emitter.on (event, listener.bind(this))
  }

  once (event, listener) {
    return this.emitter.once (event, listener.bind(this))
  }

  before (event, listener) {
    return this.emitter.prependListener (event, listener.bind(this))
  }


  //
  // The following properties are inherited from root contexts, if exist...
  //

  set tenant(t) {
    if (t) super.tenant = this.user.tenant = t
  }
  get tenant() {
    return this.tenant = this.context ? this.context.tenant : this.user.tenant
  }

  set user(u) {
    if (!u) return; else super.user = u
    // REVISIT: The following is to support user.locale
    if (this._.req) Object.defineProperty(u,'_req',{value:this._.req})
  }
  get user() {
    return this.user = this.context ? this.context.user : new User
  }

  set locale(l) {
    if (l) super.locale = this.user.locale = l
  }
  get locale() {
    return this.locale = this.context ? this.context.locale : this.user.locale
  }

  get timestamp() {
    return super.timestamp = this.context ? this.context.timestamp : Date.now()
  }

  set headers(h) { if (h) super.headers = h }
  get headers() {
    if (this._.req && this._.req.headers) {
      return super.headers = this._.req.headers
    } else {
      const headers = {}
      const outer = this.context && this.context.headers
      if (outer) for (let each of EventContext.propagateHeaders) {
        if (each in outer) headers[each] = outer[each]
      }
      return super.headers = headers
    }
  }


  //
  // Connecting to transactions and request hierarchies
  //

  set _tx(tx) {
    Object.defineProperty (this,'_tx',{value:tx}) //> allowed only once!
    const ctx = tx.context
    if (ctx && ctx !== this) {
      this.context = ctx
      // REVISIT: Eliminate req._children
      const reqs = ctx._children || (ctx._children = {})
      const all = reqs[tx.name] || (reqs[tx.name] = [])
      all.push(this)
    }
  }


  /** REVISIT: remove -> @deprecated */
  get _model() { return super._model = this._tx && this._tx.model || this.context && this.context._model }
  set _model(m){ super._model = m }
}

EventContext.propagateHeaders = [ 'x-correlation-id' ]
module.exports = EventContext
