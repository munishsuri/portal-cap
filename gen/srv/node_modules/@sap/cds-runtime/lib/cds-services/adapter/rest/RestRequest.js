const cds = global.cds || require('@sap/cds/lib')

const MODEL = Symbol.for('sap.cds.model')

const restToCqn = require('./rest-to-cqn')
const { flattenDeepToOneAssociations } = require('../../services/utils/handlerUtils')

/*
 * Class representing a REST request.
 * @extends Request
 *
 * @param {String} parsed - The parsed url of the incoming request
 * @param {Object} data - A deep copy of the request payload
 * @param {Object} restReq - express' req
 * @param {Object} restRes - express' res
 * @param {Object} service - The underlying CAP service
 */
class RestRequest extends cds.Request {
  constructor (parsed, data, restReq, restRes, service) { // NOSONAR
    const _ = { req: restReq, res: restRes }

    const { event, target } = parsed

    /*
     * query
     */
    const query = restToCqn(parsed, data, restReq)

    /*
     * user
     */
    const user = _.req.user || Object.defineProperty(new cds.User(), '_req', { enumerable: false, value: _.req })

    /*
     * method, params, headers
     */
    const { method, params, headers } = restReq
    // REVISIT: 'x-cds-incoming-protocol' workaround to find out in outgoing rest/messaging if custom headers were provided
    headers['x-cds-incoming-protocol'] = 'rest'

    /*
     * super
     */
    // REVISIT: _model should not be necessary
    super({ event, target, data, query, user, method, params, headers, _, _model: service.model })

    // REVISIT: validate associations for deep insert
    flattenDeepToOneAssociations(this, this.model)

    /*
     * req.run
     */
    Object.defineProperty(this, 'run', {
      configurable: true,
      get: () => (...args) => {
        // REVISIT: no console
        // console.warn('[cds] req.run is deprecated and will be removed')
        return cds.tx(this).run(...args)
      }
    })

    // REVISIT: streamline ref to model
    this[MODEL] = service.model

    if (this._.req.performanceMeasurement) {
      this.performanceMeasurement = this._.req.performanceMeasurement
    }
    if (this._.req.dynatrace) {
      this.dynatrace = this._.req.dynatrace
    }
  }
}

module.exports = RestRequest
